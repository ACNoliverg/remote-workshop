shiny::runApp('test-app')
help(loadingButton)
runApp('test-app')
runApp('test-app')
library(shinyFeedback)
runApp('test-app')
runApp()
runApp('test-app')
runApp('test-app')
runApp('test-app')
runApp('test-app')
runApp('test-app')
gs4_auth_configure(api_key = "AIzaSyADVX806zM7HEiTO4BNuLVX-6K5w-HCa0g",
path = "utility-time-326221-47f48a58304a.json")
gs4_auth_configure(api_key = "AIzaSyADVX806zM7HEiTO4BNuLVX-6K5w-HCa0g",
path = "test-app/utility-time-326221-47f48a58304a.json")
gs4_auth()
library(jsonlite)
fromJSON %>% help
"fromJSON"\ %>% help
"fromJSON" %>% help
fromJSON("test-app/utility-time-326221-47f48a58304a.json")
gs4_auth_configure(api_key = "AIzaSyADVX806zM7HEiTO4BNuLVX-6K5w-HCa0g",
path = fromJSON("test-app/utility-time-326221-47f48a58304a.json"))
getwd()
gs4_auth_configure(api_key = "AIzaSyADVX806zM7HEiTO4BNuLVX-6K5w-HCa0g",
path = "test-app/utility-time-326221-47f48a58304a.json")
library(shiny)
library(reactlog)
library(plotly)
reactlog_enable()
ui <- fluidPage(
selectInput("var", "Choose a variable", choices = names(diamonds)),
plotlyOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
plot_ly(x = diamonds[[input$var]])
})
}
shinyApp(ui, server)
library(shiny)
library(reactlog)
library(plotly)
reactlog_enable()
ui <- fluidPage(
selectInput("var", "Choose a variable", choices = names(diamonds)),
plotlyOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
plot_ly(x = diamonds[[input$var]])
})
}
shinyApp(ui, server)
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("shiny", dependencies=TRUE)
library(shiny)
install.packages("mime", dependencies=TRUE)
remove.packages("mime")
.libPaths()
install.packages("shiny", dependencies=TRUE)
library(shiny)
install.packages("tidyverse")
remotes::install_github("anthonynorth/rscodeio")
install.packages("remote")
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
View(ambition_descriptions)
source("global.R")
# Module: Current performance
##---------------------------- 1. UI
#----------------------------------------
currentPerformance_UI <- function(id) {
#-- 1.1 Define the input and output tabs
# 1.1.1 input
choose_performanceTab <-
tabPanel(title = "Current Performance",
titlePanel("Where do you think you are currently performing?"),
loadingButton(NS(id,"performance_submit"), "Submit"),
DTOutput(NS(id, 'performance_choices'))
)
# 1.1.2 output
compare_performanceTab <-
tabPanel("Our performance",
loadingButton(NS(id,"performance_reload"), "reload"),
plotOutput(NS(id, "performance_plot"))
)
#-- 1.2 Combine into the UI component of module
taglist(
tabPanel(title = "2. Comparing Strategies",
br(),
tabsetPanel(choose_performanceTab, compare_performanceTab)
)
)
}
##---------------------------- 2. Server
#----------------------------------------
currentPerformance_Server <- function(id) {
moduleServer(id, function(input, output, session) {
# Render the Table with the appropriate options
output$performance_choices <-
renderDT(
ambition_descriptions,
selection = c('single'),
rownames = FALSE,
option = list(dom = 't')
)
# Update the
eventReactive(input$performance_reload, {
#
read_sheet(ss = performance_id) %>%
as_tibble()
}
)
}
)
}
currentPerformance_App <- function() {
ui <- fluidPage(
currentPerformance_UI("Test"),
useShinyFeedback(FALSE),
theme = shinytheme("sandstone"),
)
server <- function(input, output, session) {
currentPerformance_Server("Test")
}
shinyApp(ui, server)
}
currentPerformance_App()
# Module: Current performance
library(shiny)
currentPerformance_Server <- function(id) {
moduleServer(id, function(input, output, session) {
# Render the Table with the appropriate options
output$performance_choices <-
renderDT(
ambition_descriptions,
selection = c('single'),
rownames = FALSE,
option = list(dom = 't')
)
# Update the
eventReactive(input$performance_reload, {
#
read_sheet(ss = performance_id) %>%
as_tibble()
}
)
}
)
}
currentPerformance_App <- function() {
ui <- fluidPage(
currentPerformance_UI("Test"),
useShinyFeedback(FALSE),
theme = shinytheme("sandstone"),
)
server <- function(input, output, session) {
currentPerformance_Server("Test")
}
shinyApp(ui, server)
}
currentPerformance_App()
currentPerformance_UI <- function(id) {
#-- 1.1 Define the input and output tabs
# 1.1.1 input
choose_performanceTab <-
tabPanel(title = "Current Performance",
titlePanel("Where do you think you are currently performing?"),
loadingButton(NS(id,"performance_submit"), "Submit"),
DTOutput(NS(id, 'performance_choices'))
)
# 1.1.2 output
compare_performanceTab <-
tabPanel("Our performance",
loadingButton(NS(id,"performance_reload"), "reload"),
plotOutput(NS(id, "performance_plot"))
)
#-- 1.2 Combine into the UI component of module
tagList(
tabPanel(title = "2. Comparing Strategies",
br(),
tabsetPanel(choose_performanceTab, compare_performanceTab)
)
)
}
##---------------------------- 2. Server
#----------------------------------------
currentPerformance_Server <- function(id) {
moduleServer(id, function(input, output, session) {
# Render the Table with the appropriate options
output$performance_choices <-
renderDT(
ambition_descriptions,
selection = c('single'),
rownames = FALSE,
option = list(dom = 't')
)
# Update the
eventReactive(input$performance_reload, {
#
read_sheet(ss = performance_id) %>%
as_tibble()
}
)
}
)
}
currentPerformance_App <- function() {
ui <- fluidPage(
currentPerformance_UI("Test"),
useShinyFeedback(FALSE),
theme = shinytheme("sandstone"),
)
server <- function(input, output, session) {
currentPerformance_Server("Test")
}
shinyApp(ui, server)
}
currentPerformance_App()
# 1.1.2 output
compare_performanceTab <-
tabPanel("Our performance",
loadingButton(NS(id,"performance_reload"), "reload"),
plotOutput(NS(id, "performance_plot"))
)
library(shiny)
library(shinyFeedback)
library(shinythemes)
library(reactlog)
# Module: Welcome
# Action: Authenticates and
reactlog_enable()
# 1. Module UI
welcomeUI <- function(id) { # nolint
tagList(
tabPanel(title = "Welcome!",
titlePanel("Thank you for joining our workshop."),
textInput(NS(id, "username"), "Please enter your name"),
loadingButton(NS(id, "submit_name"),
label = "Submit",
loadingLabel = "Submitting...")
)
)
}
welcomeServer <- function(id) { # nolint
moduleServer(id, function(input, output, session) {
# User attempts to submit their credentials
observeEvent(input$submit_name, {
Sys.sleep(3)
resetLoadingButton("submit_name")
showToast(
"success",
paste0("Thanks ",
input$username,
"! Head over to '1. Current performance'")
)
}
)
}
)
}
welcomeApp <- function() {
ui <- fluidPage(
welcomeUI("Test"),
useShinyFeedback(FALSE),
theme = shinytheme("sandstone"),
)
server <- function(input, output, session) {
welcomeServer("Test")
}
shinyApp(ui, server)
}
welcomeApp()
install.packages("paws")
getwd()
install.packages("paws")
install.packages('AmesHousing')
